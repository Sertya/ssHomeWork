describe("mixSequence", function() {
  it("Получает пустой массив в качестве первого аргумента, возвращает пустой массив", function() {
    assert.deepEqual(mixSequence([], 10), []);
  });
  it("Получает ноль в качестве второго аргумента, возвращает пустой массив", function() {
    assert.deepEqual(mixSequence(['fib'], 0), []);
  });
  it("Получает массив с одним элементом 'fib' и 10 в качестве второго аргумента, возвращает массив из 10 первых чисел ряда Фибоначчи", function() {
    assert.deepEqual(mixSequence(['fib'], 10), [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]);
  });
  it("Получает массив с одним элементом 'pad' и второй аргумент 10, возвращает массив из 10 первых чисел ряда Падована", function() {
    assert.deepEqual(mixSequence(['pad'], 10), [1, 0, 0, 1, 0, 1, 1, 1, 2, 2]);
  });
  it("Получает массив с одним элементом 'jac' и второй аргумент 10, возвращает массив из 10 первых чисел ряда jacobsthal", function() {
    assert.deepEqual(mixSequence(['jac'], 10), [0, 1, 1, 3, 5, 11, 21, 43, 85, 171]);
  });
  it("Получает массив с одним элементом 'pel' и второй аргумент 10, возвращает массив из 10 первых чисел ряда pell", function() {
    assert.deepEqual(mixSequence(['pel'], 10), [0, 1, 2, 5, 12, 29, 70, 169, 408, 985]);
  });
  it("Получает массив с одним элементом 'tri' и второй аргумент 10, возвращает массив из 10 первых чисел ряда tribonacci", function() {
    assert.deepEqual(mixSequence(['tri'], 10), [0, 0, 1, 1, 2, 4, 7, 13, 24, 44]);
  });
  it("Получает массив с одним элементом 'tet' и второй аргумент 10, возвращает массив из 10 первых чисел ряда tetranacci", function() {
    assert.deepEqual(mixSequence(['tet'], 10), [0, 0, 0, 1, 1, 2, 4, 8, 15, 29]);
  });
  it("Получает массив ['fib', 'tet'] и второй аргумент 10, возвращает массив с комбинацией чисел рядов fibonacci  и tetranacci", function() {
    assert.deepEqual(mixSequence(['fib', 'tet'], 10), [0, 0, 1, 0, 1, 0, 2, 1, 3, 1]);
  });
  it("Получает массив ['jac', 'jac', 'pel'] и второй аргумент 10, возвращает массив с комбинацией чисел рядов jacobsthal  и pell", function() {
    assert.deepEqual(mixSequence(['jac', 'jac', 'pel'], 10), [0, 1, 0, 1, 3, 1, 5, 11, 2, 21]);
  });
});
